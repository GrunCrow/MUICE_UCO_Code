install.packages("igraph")
library(igraph)
library("Rcmdr")
q()
library("Rcmdr")
q()
nodes <- read.csv("RedAlba-nodes.csv", header = T)
nodes <- read.csv("RedAlba-nodes.csv", header = T)
load("C:/Users/albam/OneDrive - Universidad de Córdoba/0. Universidad/MUICE/2º Cuatrimestre/[AW] - Analítica de web/2. Amelia Azafra/RedAlba-nodes.csv")
setwd("C:/Users/albam/OneDrive - Universidad de Córdoba/0. Universidad/MUICE/2º Cuatrimestre/[AW] - Analítica de web/2. Amelia Azafra")
nodes <- read.csv("RedAlba-nodes.csv", header = T)
links <- read.csv("RedAlba-edges.csv", header = T)
#Crear una red a partir de dichos datos (igraph)
net <- graph.data.frame(d=links,vertices=nodes,directed= F)
#Comprobar que el objeto net es de tipo igraph
class(net)
library(igraph)
#Crear una red a partir de dichos datos (igraph)
net <- graph.data.frame(d=links,vertices=nodes,directed= F)
#Comprobar que el objeto net es de tipo igraph
class(net)
#Ver un resumen del tipo de dato
summary(net)
#Ver las primeras líneas de nodos y enlaces
head(nodes)
head(links)
#Acceder a las propiedades de los nodos y enlaces dentro del objeto net
V(net)
E(net)
#Acceder al campo label en los nodos y el campo weight en las aristas
table(V(net)$label)
table(E(net)$Weight)
plot(net)
#En este caso no es necesario, pero habría que convertir el grafo en no dirigido para hacer estos
#cálculos porque Igraph trata la red como no dirigida cuando hace las operaciones
#de cliques
#net.sym <- as.undirected(net, mode="collapse",edge.attr.comb = list(weight="sum","ignore"))
net.sym <- net
#Encontrar el número de cliques igual o mayores de 3 usando el método  count_max_cliques()
count_max_cliques(net.sym, min=3)
#Obtener el número de elementos del clique de mayor tamaño
clique_num(net.sym)
#Listar los cliques de tamaño 3 o superior
max_cliques(net.sym, min=3)
mc <- max_cliques(net.sym, min=3)
for(i in 1:length(mc)){
print(mc[[i]])
plot(induced_subgraph(net.sym, mc[[i]]))
}
cliq <- largest_cliques(net.sym)
for(i in 1:length(cliq)){
print(cliq[[i]])
}
par(mfrow = c(1, 2))
for(i in 1:length(cliq)){
plot(induced_subgraph(net.sym, cliq[[i]]))
}
par(mfrow = c(1, 1))
###############################
# k-cores
##############################
#Encontrar los k-cores, nodos que están conectados a otros k nodos
kcore <- coreness(net.sym)
#Mostrar los cores. Los nombres de los vértices está arriba y el core al que pertenece abajo
print(kcore)
#Añadir la propiedad kcore a los nodos de la red
V(net.sym)$kcore <- kcore
print(V(net.sym)$kcore)
#Mostrar el gráfico donde el color de los nodos está en función del
#kcore
plot(net.sym, edge.arrow.size=.2, edge.arrow.width=0.6, edge.curved=0,
vertex.color=V(net.sym)$kcore, vertex.frame.color="#555555",
vertex.label=V(net)$label, vertex.label.color="black",
vertex.label.cex=.5, vertex.size=V(net)$degree, layout=layout.fruchterman.reingold,
edge.width = E(net.sym)$weight/3)
#Obtener uno o más subgrafos basados en k-cores
#Mostrar los nodos incluidos en cada k-core
table(kcore)
#Mostrar el 4-core usando la función induced_subgraph().
g4c <- induced_subgraph(net.sym, kcore==4)
##Mostrar la gráfica
plot(g4c)
